name: Generate a new daily image pair

on:
   push:
      branches:
         - 'topic/daily-action' # Trigger on this branch for testing
   # schedule:
   #    - cron: '0 0 * * *'
   workflow_dispatch: # Allows manual trigger of the action

jobs:
   fetch-news:
      runs-on: ubuntu-latest
      steps:
         - name: Checkout repository
           uses: actions/checkout@v2

         - name: Set up dependencies
           run: |
              sudo apt-get update
              sudo apt-get install -y jq curl

         - name: Fetch news data
           run: |
               # Fetch news descriptions and save them to a variable
               PAGE=""
               ALL_DESCRIPTIONS=""
               for i in {0..5}; do
                  URL="https://newsdata.io/api/1/latest?apikey=$NEWSDATA_API_KEY&country=bg&domain=24chasa,dnevnik,mediapool&category=politics,business"
                  if [ "$PAGE" != "" ]; then
                     URL="$URL&page=$PAGE"
                  fi
                  RESPONSE=$(curl -s "$URL")
                  STATUS=$(echo "$RESPONSE" | jq -r '.status')
                  if [ "$STATUS" != "success" ]; then
                     echo "Failed to fetch news or invalid response."
                     exit 1
                  fi
                  DESCRIPTIONS=$(echo "$RESPONSE" | jq -r '.results | map(.description) | join("; ")')
                  ALL_DESCRIPTIONS+="$DESCRIPTIONS; "
                  PAGE=$(echo "$RESPONSE" | jq -r '.nextPage')
                  if [ "$PAGE" == "null" ]; then
                     break
                  fi
               done
               ALL_DESCRIPTIONS=$(echo $ALL_DESCRIPTIONS| sed -e "s/'/'\\\\''/g" -e 's/"/\\"/g')
               echo "Fetched Descriptions:"
               echo "$ALL_DESCRIPTIONS"
           env:
              NEWSDATA_API_KEY: ${{ secrets.NEWSDATA_API_KEY }}

         - name: Summarize news data
           run: |
               SUMMARY=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{
                     "model": "gpt-3.5-turbo",
                     "messages": [{"role": "user", "content": "Imagine you are reporting to a large-language model, which will then have to use that information to generate an image of the day. Please extract the most relevant information by summarizing the following news, delimited with a semicolon:'"$ALL_DESCRIPTIONS"'"}]
                  }')
               SUMMARY_TEXT=$(echo $SUMMARY | jq -r '.choices[0].message.content')
               echo "Summary of today's news:"
               echo "$SUMMARY_TEXT"
           env:
               OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

         - name: Summarize weather
           run: |
               WEATHER_JSON=$(curl "http://api.weatherapi.com/v1/forecast.json?key=$WEATHERAPI_KEY&q=Sofia")
               WEATHER_REPORT="Minimum temperature today will be $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.mintemp_c') degrees Celsius.
               Maximum temperature will be $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.maxtemp_c') degrees Celsius.
               Expected winds of up to $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.maxwind_kph') km/h.
               Humidity will be $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.avghumidity') percent.
               Expected visibility of around $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.avgvis_km') km.
               Weather condition is $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.condition.text')."
               if [[ $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.daily_chance_of_rain') != "0" ]]; then
                  WEATHER_REPORT="$WEATHER_REPORT
                  Expected rainfall of around $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.totalprecip_mm') millimeters.
                  Chance of rainfall is $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.daily_chance_of_rain')"
               fi
               if [[ $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.daily_chance_of_snow') != "0" ]]; then
                  WEATHER_REPORT="$WEATHER_REPORT
                  Expected snowfall of around $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.totalsnow_cm') centimeters.
                  Chance of snowfall is $(echo $WEATHER_JSON | jq '.forecast.forecastday[0].day.daily_chance_of_snow')"
               fi
               echo "Summary of today's weather:"
               echo "$WEATHER_REPORT"
           env:
               WEATHERAPI_KEY: ${{ secrets.WEATHERAPI_KEY }}

         - name: Generate images
           run: |
               RESPONSE=$(curl -s -X POST https://api.openai.com/v1/images/generations \
               -H "Content-Type: application/json" \
               -H "Authorization: Bearer $OPENAI_API_KEY" \
               -d '{
                  "model": "dall-e-3",
                  "prompt": "Here is the news report for today: $ALL_DESCRIPTIONS. Here is the weather report for today: $WEATHER_REPORT. Incorporating as much of that information as possible, please create an image of the day, containing the following: Envision a serene photorealistic scene with a white recreational vehicle standing still. The RV trumps all other visual elements for its distinctness. Bold black lettering sprawls across the front of the RV, forming the words \"Rest & Vest\". The overall atmosphere of the image conveys a powerful message of peace, rest, tranquillity, and patience, perhaps suggesting a leisurely or calm lifestyle, away from the troubles of today. The details should intensify the intended sentiment, making the viewer feel an instant wave of relaxation and calmness.",
                  "n": 1,
                  "size": "1792x1024"
               }')
               echo "Response from ChatGPT:"
               echo $RESPONSE
               RESULT_URL=$(echo $RESPONSE | jq -r '.data[0].url')
               curl --output image.png $RESULT_URL
           env:
               OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

         # - name: Upload news data as an artifact
         #   uses: actions/upload-artifact@v2
         #   with:
         #      name: btv_novinite_news
         #      path: all_btv_novinite_articles.txt
