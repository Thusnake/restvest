name: Generate a new daily image pair

on:
   schedule:
      - cron: '0 6 * * 1-5'
   workflow_dispatch: # Allows manual trigger of the action

jobs:
   fetch-news:
      runs-on: ubuntu-latest
      permissions: write-all
      steps:
         - name: Checkout repository
           uses: actions/checkout@v2

         - name: Set up dependencies
           run: |
              sudo apt-get update
              sudo apt-get install -y jq curl webp

         - name: Fetch news data
           id: fetch-news
           uses: nick-fields/retry@v3
           with:
               timeout_minutes: 1
               max_attempts: 3
               command: |
                     # Fetch news descriptions and save them to a variable
                     RESPONSE=$(curl https://api.x.ai/v1/chat/completions \
                       -H "Content-Type: application/json" \
                       -H "Authorization: Bearer $GROK_API_KEY" \
                       -d '{
                           "messages": [
                              {
                              
                                 "role": "user",
                                 "content": "Дай ми описание на петте най-важни новини от България днес. Опиши накратко или в умерен детайл, в зависимост от новината. Форматирай отговора си на един ред, без да използваш какъвто и да е markdown."
                              }
                           ],
                           "search_parameters": {
                              "mode": "on",
                              "from_date": "'"$(date -d 'yesterday' +%Y-%m-%d)"'",
                              "to_date": "'"$(date -d 'today' +%Y-%m-%d)"'",
                              "sources": [{ "type": "news", "country": "BG" }]
                           },
                           "model": "grok-4"
                       }')
                     echo $RESPONSE
                     DESCRIPTIONS=$(echo $RESPONSE | jq -r '.choices[0].message.content' | sed -e "s/'//g" -e 's/"/\\"/g')
                     if [ $(echo $DESCRIPTIONS | wc -w) -le 1 ]; then
                        echo "Failed to fetch news or invalid response."
                        exit 1
                     fi
                     echo "Fetched Descriptions:"
                     echo "$DESCRIPTIONS"
                     echo "NEWS=$DESCRIPTIONS" >> "$GITHUB_OUTPUT"
           env:
              GROK_API_KEY: ${{ secrets.GROK_API_KEY }}

         - name: Summarize weather
           id: fetch-weather
           run: |
               WEATHER_JSON=$(curl "http://api.weatherapi.com/v1/forecast.json?key=$WEATHERAPI_KEY&q=Sofia")
               WEATHER_REPORT="Minimum temperature today will be $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.mintemp_c') degrees Celsius.; Maximum temperature will be $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.maxtemp_c') degrees Celsius.; Expected winds of up to $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.maxwind_kph') km/h.; Humidity will be $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.avghumidity') percent.; Expected visibility of around $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.avgvis_km') km.; Weather condition is $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.condition.text')."
               if [[ $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.daily_chance_of_rain') != "0" ]]; then
                  WEATHER_REPORT="$WEATHER_REPORT; Expected rainfall of around $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.totalprecip_mm') millimeters.; Chance of rainfall is $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.daily_chance_of_rain')"
               fi
               if [[ $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.daily_chance_of_snow') != "0" ]]; then
                  WEATHER_REPORT="$WEATHER_REPORT; Expected snowfall of around $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.totalsnow_cm') centimeters.; Chance of snowfall is $(echo $WEATHER_JSON | jq -r '.forecast.forecastday[0].day.daily_chance_of_snow')"
               fi
               echo "Summary of today's weather:"
               echo "$WEATHER_REPORT"
               echo "WEATHER=$WEATHER_REPORT" >> "$GITHUB_OUTPUT"
           env:
               WEATHERAPI_KEY: ${{ secrets.WEATHERAPI_KEY }}

         - name: Generate image prompt
           id: generate-prompt
           run: |
               echo "Received descriptions:"
               echo $NEWS
               echo "Received weather:"
               echo $WEATHER
               PROMPT=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $OPENAI_API_KEY" \
                  -d '{"model": "gpt-4.1", "messages": [{"role": "user", "content": "Here is the news report for today in Bulgarian: '"$NEWS"'. Here is the weather report for today: '"$WEATHER"'. Using both the news and the weather information, create a text prompt for an image generation model. The image must contain a white RV van, which MUST have bold black letters on the front of it, forming the words \"Rest & Vest\". The plate number MUST spell out \"BUCARKA1\". The image MUST contain a black panther with a halo, riding on a sandworm from Dune. The image should be in the style of a medieval church stained glass. The image should incorporate in some way both the news and the weather for today. The image should convey a sense of positivity and calmness. Do not use any specific numbers or text from the news, only descriptions. The image must be an allegory of the news. Incorporate specific elements from the news into the image description. Do not be vague with your prompt. Response should be written on a single line."}]}')
               PROMPT_TEXT=$(echo $PROMPT | jq -r '.choices[0].message.content' | tail -n 1 | sed -e "s/'//g" -e 's/"/\\"/g')
               if [ $PROMPT_TEXT == "null" ]; then
                  echo "Failed to generate prompt:"
                  echo $PROMPT
                  exit 1
               fi
               echo "Prompt for image:"
               echo "$PROMPT_TEXT"
               echo "PROMPT=$PROMPT_TEXT" >> "$GITHUB_OUTPUT"
           env:
               OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
               NEWS: ${{ steps.fetch-news.outputs.NEWS }}
               WEATHER: ${{ steps.fetch-weather.outputs.WEATHER }}

         - name: Checkout van of the day from repo
           uses: actions/checkout@v4
           with:
               sparse-checkout: |
                  rv-of-the-day.webp
               sparse-checkout-cone-mode: false

         - name: Generate images
           run: |
               RESPONSE=$(curl -s -X POST https://api.openai.com/v1/images/generations \
               -H "Content-Type: application/json" \
               -H "Authorization: Bearer $OPENAI_API_KEY" \
               -d '{"model": "gpt-image-1", "prompt": "'"$PROMPT"'", "n": 1, "size": "1536x1024", "quality": "high", "output_format": "webp", "output_compression": 80}')
               echo "Response from ChatGPT:"
               echo $RESPONSE
               echo $RESPONSE | jq -r '.data[0].b64_json' | base64 --decode > $GITHUB_WORKSPACE/image.webp
           env:
               OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
               PROMPT: ${{ steps.generate-prompt.outputs.PROMPT }}

         - name: Upload van of the day
           run: |
               git pull
               mv $GITHUB_WORKSPACE/image.webp rv-of-the-day.webp
               echo $PROMPT > description-of-the-day.txt
               git config --global user.name "github-actions[bot]"
               git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
               git add rv-of-the-day.webp
               git commit -m "Update RV of the day via GitHub Actions"
               git push
           env:
               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
